get_northAmerica <- function(){
usa = ne_countries(country = "United States of America")
canada = ne_countries(country = "Canada")
mexico = ne_countries(country = "Mexico")
canada <- canada %>% st_as_sf
usa <- usa %>% st_as_sf
mexico <- mexico %>% st_as_sf
north_america <- st_union(usa, canada) %>% st_union(., mexico) %>%
mutate(LC = factor("land")) %>% dplyr::select(LC)
}
north_america <- get_northAmerica()
source('R/libraries.R')
north_america <- get_northAmerica()
north_america %>% glimpse
str(north_america)
run_trajectory_model <- function(start_date, end_date,
locations_df,
met_dir_in) {
trajectory_list <- list()
# Iterate over each location in the locations dataframe
for (j in 1:nrow(locations_df)) {
lat <- locations_df$latitude
lon <- locations_df$longitude
# Get the StationNumber associated with the current lat and lon
station <- locations_df$station[j]
# Create trajectory model for the current location
trajectory_model <- create_trajectory_model() %>%
add_grid(
lat = lat,
lon = lon,
range = c(0.28, 0.28),
division = c(0.14, 0.14))  %>%
add_trajectory_params(
height = 1000,
duration = 120,
days = seq(as.Date(start_date), as.Date(end_date), by = "day"),
daily_hours = c(0, 6, 12, 18),
direction = "backward",
met_type = "reanalysis",
met_dir = met_dir_in,
model_height = 10000) %>%
splitr::run_model()
#
# # Get trajectory output as a data frame for the current location
trajectory_df <- trajectory_model %>% get_output_tbl()
#
# # Add a column to the dataframe with the corresponding StationNumber
trajectory_df$station <- station
#
# Append the named trajectory data frame to the list
trajectory_list[[j]] <- trajectory_df
}
# Return the list of named trajectory data frames for all locations
return(trajectory_list)
}
example_traj_df <- run_trajectory_model(start_date = start_date,
end_date = end_date,
locations_df = locs,
met_dir_in = met_dir_in)
# study area locations. Medford Airport is point 4.
locs <- data.frame(
station = c('1', '2', '3', '4', '5', '6', '7', '8', '9'),
latitude = c(42.235032, 42.235032, 42.23503, 42.375032, 42.375032, 42.375032, 42.515032, 42.515032, 42.515032),
longitude = c(-123.017016, -122.877016, -122.7370160, -123.017016, -122.877016, -122.737016, -123.017016, -122.877016, -122.737016)
)
# Convert locs to a simple features data frame with a CRS
locs_sf <- st_as_sf(locs, coords = c("longitude", "latitude"), crs = 4326)
ggplot() +
geom_sf(data = locs_sf, aes(color = station)) +
theme_minimal() +
labs(title = "Station Locations",
x = "Longitude",
y = "Latitude") +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_text(size = 12))
leaflet(data = locs) %>%
addTiles() %>%
addMarkers(
label = ~station,
clusterOptions = markerClusterOptions()
)
write_csv(locs, 'raw_data/locations.csv')
View(locs)
args = c("raw_data/locs.csv", "raw_data/met_dir", "processed_data/example_traj", paste0("C:/Users/philip.moffatt/Documents/GitHub/Rasterizing-gridMET-HYSPLT/processed_data/exec_dir/runs_", format(Sys.time(), "%Y-%m-%d_%H-%M-%S")))
locations_in = read_csv(args[1])
args = c("raw_data/locations.csv", "raw_data/met_dir", "processed_data/example_traj", paste0("C:/Users/philip.moffatt/Documents/GitHub/Rasterizing-gridMET-HYSPLT/processed_data/exec_dir/runs_", format(Sys.time(), "%Y-%m-%d_%H-%M-%S")))
locations_in = read_csv(args[1])
View(locations_in)
locs
locs$date <- '2021-01-25'
locs
start_date <- '2021-01-25' # beginning date for trajectory data
end_date <- '2021-01-26'   # end date for the trajectory data
dates <- seq.Date(start_date, end_date, by = "day") # Create a sequence of dates
dates <- seq.Date(as.Date(start_date), as.Date(end_date), by = "day") # Create a sequence of dates
dates
# Create a new dataframe with repeated location data for each date
locations_df <- expand.grid(date = dates, locs)
locations_df
# Rearrange columns to match the desired output
locations_df <- locations_df[c("station", "latitude", "longitude", "date")]
# Repeat the location data for each date
locations_repeated <- locs[rep(seq_len(nrow(locs)), each = length(dates)), ]
# Repeat the dates to match the number of rows in the repeated locations dataframe
dates_repeated <- rep(dates, times = nrow(locs))
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated)
# Print the resulting dataframe
print(locations_df)
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated) %>% arrange(date)
# Print the resulting dataframe
print(locations_df)
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated) %>% arrange(station, date)
# Print the resulting dataframe
print(locations_df)
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated) %>% arrange(date, station)
# Print the resulting dataframe
print(locations_df)
start_date <- '2021-01-25' # beginning date for trajectory data
end_date <- '2021-01-26'   # end date for the trajectory data
# Create a sequence of dates
dates <- seq.Date(as.Date(start_date), as.Date(end_date), by = "day")
# Repeat the location data for each date
locations_repeated <- locs[rep(seq_len(nrow(locs)), each = length(dates)), ]
# Repeat the dates to match the number of rows in the repeated locations dataframe
dates_repeated <- rep(dates, times = nrow(locs))
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated) %>% arrange(date, station)
# Print the resulting dataframe
print(locations_df)
# Repeat the location data for each date
locations_repeated <- locs[rep(seq_len(nrow(locs)), each = length(dates)), ]
# Repeat the dates to match the number of rows in the repeated locations dataframe
dates_repeated <- rep(dates, times = nrow(locs))
# Combine the repeated locations and dates into a new dataframe
locations_df <- cbind(locations_repeated, date = dates_repeated)
# Print the resulting dataframe
print(locations_df)
# Create a new dataframe with repeated rows for each date
locations_df <- locs %>%
slice(rep(1:n(), each = length(dates))) %>%
mutate(date = rep(dates, times = nrow(locs)))
locations_df
# Create a new dataframe with repeated rows for each date
locations_df <- locs %>%
slice(rep(1:n(), each = length(dates))) %>%
mutate(date = rep(dates, times = nrow(locs))) %>%
arrange(date, location)
# Create a new dataframe with repeated rows for each date
locations_df <- locs %>%
slice(rep(1:n(), each = length(dates))) %>%
mutate(date = rep(dates, times = nrow(locs))) %>%
arrange(date, station)
locations_df
write_csv(locations_df, raw_data/locations.csv)
write_csv(locations_df, 'raw_data/locations.csv')
# examine the locations chosen on a map
leaflet(data = locs) %>%
addTiles() %>%
addMarkers(
label = ~station,
clusterOptions = markerClusterOptions()
)
# Convert locs to a simple features data frame with a CRS
locs_sf <- st_as_sf(locs, coords = c("longitude", "latitude"), crs = 4326)
# plot the locations
ggplot() +
geom_sf(data = locs_sf, aes(color = station)) +
theme_minimal() +
labs(title = "Station Locations",
x = "Longitude",
y = "Latitude") +
theme(legend.position = "right",
plot.title = element_text(hjust = 0.5, size = 16),
axis.title = element_text(size = 12))
start_date <- '2021-01-25' # beginning date for trajectory data
end_date <- '2021-01-26'   # end date for the trajectory data
# Create a sequence of dates
dates <- seq.Date(as.Date(start_date), as.Date(end_date), by = "day")
# Create a new dataframe with repeated rows for each date
locations_df <- locs %>%
slice(rep(1:n(), each = length(dates))) %>%
mutate(date = rep(dates, times = nrow(locs))) %>%
arrange(date, station)
# example
args = c("raw_data/locations.csv", "raw_data/met_dir", "processed_data/example_traj", paste0("C:/Users/philip.moffatt/Documents/GitHub/Rasterizing-gridMET-HYSPLT/processed_data/exec_dir/runs_", format(Sys.time(), "%Y-%m-%d_%H-%M-%S")))
locations_in = read_csv(args[1]) # "Hysplt/working_dir/traj_group_$SLURM_ARRAY_TASK_ID" array controls # jobs to run
View(locations_in)
locations_in = read_csv(args[1])
met_dir_in = args[2]
Out_dir = args[3]
exec_dir = args[4]
if (!length(args)==4) {
stop('argumentes are expected in order
1: the group run file to be iterated over - each line is one location and one day
2: the met dir defalts to "Hysplt/met_dir"
3: the base output directory Hysplt/processed_data/runs_$sys.date/
4: exec_dir where the in/out model files are loaded')
}
print(paste('Locations argument is:', args[1]))
print(paste('Meteorology argument is:', args[2]))
print(paste('Processed data directory argument is:', args[3]))
print(paste('Execution directory argument is:', args[4]))
# Split to list
test_list =(locations_in %>%
split(locations_in$station))
